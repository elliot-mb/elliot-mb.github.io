{"ast":null,"code":"var _jsxFileName = \"/home/elliot/Documents/computer-science/personal-projects/web/frameworks/React/personal-webpage/v0.2/src/components/GitResource.js\";\n// export function gitResource(url){\n//   const siteRoot = \"https://github.com\";\n//   const re = new RegExp(siteRoot);\n//   if(!url.match(re)) { \n//     console.error(`Attempting to load ${url}, it was incorrectly formatted.`);\n//     return {\"error\": `bad formatting in url ${url}`}; \n//   }\n//   const apiRoot = \"https://api.github.com\";\n//   const call = `${apiRoot}${url.split(siteRoot)[0]}`;\n//   return fetch(call).then(r => {\n//         if(!r.ok) {\n//           console.error(`Attempting to load ${url}, got status ${r.status}.`);\n//           return {\"error\": `status ${r.status}`};\n//         }\n//         return r.json()\n//       }\n//     );\n// }\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class GitResource extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: \"no\",\n      // options: yes, no, error\n      item: null\n    };\n  }\n\n  gitResource(url) {\n    const siteRoot = \"https://github.com\";\n    const re = new RegExp(siteRoot);\n\n    if (!url.match(re)) {\n      const e = `Attempting to load ${url}, it was incorrectly formatted.`;\n      console.error(e);\n      this.setState({\n        loaded: \"error\",\n        errmsg: e\n      });\n      return {};\n    }\n\n    const apiRoot = \"https://raw.githubusercontent.com/\";\n    const call = `${apiRoot}${url.split(siteRoot)[1]}/master/README.md`;\n    console.log(`Request on ${call}`);\n    fetch(call).then(r => {\n      if (!r.ok) {\n        const e = `Attempting to load ${url}, got status ${r.status}.`;\n        console.error(e);\n        this.setState({\n          loaded: \"error\",\n          errmsg: e\n        });\n      }\n\n      return r;\n    }).then(result => {\n      if (this.state.loaded !== \"error\") {\n        //this.setState({loaded: \"yes\", item: result});\n        return r;\n      }\n    }, error => {\n      this.setState({\n        loaded: \"error\",\n        errmsg: `Attempting to load ${url}, got error ${error}`\n      });\n    } //processText cant be anonymous because it is recursive\n    ).body.getReader().read().then(function processText(_ref) {\n      let {\n        done,\n        value\n      } = _ref;\n\n      if (done) {\n        this.setState({\n          loaded: \"yes\",\n          item: value\n        });\n        return;\n      }\n\n      return reader.read().then(processText);\n    });\n  }\n\n  componentDidMount() {\n    this.gitResource(this.props.url);\n  }\n\n  render() {\n    switch (this.state.loaded) {\n      case \"no\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"content\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Fetching from github...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this);\n\n      case \"error\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"An error occured\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.errmsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this);\n\n      default:\n        console.log(this.state.item);\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"fetched\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this);\n    }\n  }\n\n}","map":{"version":3,"names":["React","GitResource","Component","constructor","props","state","loaded","item","gitResource","url","siteRoot","re","RegExp","match","e","console","error","setState","errmsg","apiRoot","call","split","log","fetch","then","r","ok","status","result","body","getReader","read","processText","done","value","reader","componentDidMount","render"],"sources":["/home/elliot/Documents/computer-science/personal-projects/web/frameworks/React/personal-webpage/v0.2/src/components/GitResource.js"],"sourcesContent":["// export function gitResource(url){\n//   const siteRoot = \"https://github.com\";\n//   const re = new RegExp(siteRoot);\n//   if(!url.match(re)) { \n//     console.error(`Attempting to load ${url}, it was incorrectly formatted.`);\n//     return {\"error\": `bad formatting in url ${url}`}; \n//   }\n//   const apiRoot = \"https://api.github.com\";\n//   const call = `${apiRoot}${url.split(siteRoot)[0]}`;\n//   return fetch(call).then(r => {\n//         if(!r.ok) {\n//           console.error(`Attempting to load ${url}, got status ${r.status}.`);\n//           return {\"error\": `status ${r.status}`};\n//         }\n\n//         return r.json()\n//       }\n//     );\n// }\n\nimport React from 'react';\n\nexport class GitResource extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loaded: \"no\", // options: yes, no, error\n      item: null\n    }\n  }\n\n  gitResource(url){\n\n    const siteRoot = \"https://github.com\";\n    const re = new RegExp(siteRoot);\n    if(!url.match(re)) { \n      const e = `Attempting to load ${url}, it was incorrectly formatted.`;\n      console.error(e);\n      this.setState({loaded: \"error\", errmsg: e}); \n      return {};\n    }\n    const apiRoot = \"https://raw.githubusercontent.com/\";\n    const call = `${apiRoot}${url.split(siteRoot)[1]}/master/README.md`;\n    console.log(`Request on ${call}`);\n    fetch(call).then(r => {\n          if(!r.ok) {\n            const e = `Attempting to load ${url}, got status ${r.status}.`;\n            console.error(e);\n            this.setState({loaded: \"error\", errmsg: e}); \n          }\n  \n          return r;\n        })\n        .then(\n          (result) => {\n            if(this.state.loaded !== \"error\"){\n              //this.setState({loaded: \"yes\", item: result});\n              return r;\n            }\n          }, \n          (error) => {\n            this.setState({loaded: \"error\", errmsg: `Attempting to load ${url}, got error ${error}`});\n          }\n          //processText cant be anonymous because it is recursive\n        ).body.getReader().read().then(function processText({done, value}) {\n          if(done){\n            this.setState({loaded: \"yes\", item: value});\n            return;\n          }\n\n          return reader.read().then(processText);\n        });\n  }\n\n  componentDidMount(){ \n    this.gitResource(this.props.url);\n  }\n\n  render(){\n    switch(this.state.loaded){\n      case \"no\":\n        return( \n          <div id=\"content\">\n            <p>Fetching from github...</p>\n          </div>\n        )\n      case \"error\":\n        return(\n          <div id=\"content\">\n            <h2>An error occured</h2>\n            <p>{this.state.errmsg}</p>\n          </div>\n        )\n      default:\n        console.log(this.state.item);\n        return(\n          <p>fetched</p>\n        )\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}