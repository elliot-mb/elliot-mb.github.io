{"ast":null,"code":"var _jsxFileName = \"/home/elliot/Documents/computer-science/personal-projects/web/frameworks/React/personal-webpage/v0.2/src/components/GitResource.js\";\n// export function gitResource(url){\n//   const siteRoot = \"https://github.com\";\n//   const re = new RegExp(siteRoot);\n//   if(!url.match(re)) { \n//     console.error(`Attempting to load ${url}, it was incorrectly formatted.`);\n//     return {\"error\": `bad formatting in url ${url}`}; \n//   }\n//   const apiRoot = \"https://api.github.com\";\n//   const call = `${apiRoot}${url.split(siteRoot)[0]}`;\n//   return fetch(call).then(r => {\n//         if(!r.ok) {\n//           console.error(`Attempting to load ${url}, got status ${r.status}.`);\n//           return {\"error\": `status ${r.status}`};\n//         }\n//         return r.json()\n//       }\n//     );\n// }\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class GitResource extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: \"no\",\n      // options: yes, no, error\n      item: null\n    };\n    this.result = \"\";\n  }\n\n  gitResource(url) {\n    const siteRoot = \"https://github.com\";\n    const re = new RegExp(siteRoot);\n\n    if (!url.match(re)) {\n      const e = `Attempting to load ${url}, it was incorrectly formatted.`;\n      console.error(e);\n      this.setState({\n        loaded: \"error\",\n        errmsg: e\n      });\n      return {};\n    }\n\n    const apiRoot = \"https://raw.githubusercontent.com/\";\n    const call = `${apiRoot}${url.split(siteRoot)[1]}/master/README.md`;\n    console.log(`GET ${call}`);\n    let self = this;\n    fetch(call).then(r => {\n      if (!r.ok) {\n        const e = `Attempting to load ${url}, got status ${r.status}.`;\n        console.error(e);\n        this.setState({\n          loaded: \"error\",\n          errmsg: e\n        });\n      }\n\n      return r;\n    }).then(result => {\n      if (this.state.loaded !== \"error\") {\n        return result.body.getReader();\n      }\n    }, error => {\n      this.setState({\n        loaded: \"error\",\n        errmsg: `Attempting to load ${url}, got error ${error}`\n      });\n    } //processText cant be anonymous because it is recursive\n    ).then(reader => {\n      reader.read().then(_ref => {\n        let {\n          done,\n          value\n        } = _ref;\n\n        if (done) {\n          //this.setState({loaded: \"yes\", item: value});\n          const str = new TextDecoder(\"utf-8\").decode(new Uint8Array([84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 85, 105, 110, 116, 56, 65, 114, 114, 97, 121, 32, 99, 111, 110, 118, 101, 114, 116, 101, 100, 32, 116, 111, 32, 97, 32, 115, 116, 114, 105, 110, 103]));\n          console.log(str); //console.log((Array.of(chars))[0].split(/,/).reduce((x, y) => `${x} ${y}`, \"\"));\n\n          self.setState({\n            loaded: \"yes\",\n            item: str\n          });\n        } //console.log(`Reading...${value}`);\n\n\n        const chunk = value;\n        self.result += chunk;\n        return reader.read().then(processText);\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.gitResource(this.props.url);\n  }\n\n  render() {\n    switch (this.state.loaded) {\n      case \"no\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"content\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Fetching from github...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this);\n\n      case \"error\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"An error occured\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.errmsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `${this.state.item}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this);\n    }\n  }\n\n}","map":{"version":3,"names":["React","GitResource","Component","constructor","props","state","loaded","item","result","gitResource","url","siteRoot","re","RegExp","match","e","console","error","setState","errmsg","apiRoot","call","split","log","self","fetch","then","r","ok","status","body","getReader","reader","read","done","value","str","TextDecoder","decode","Uint8Array","chunk","processText","componentDidMount","render"],"sources":["/home/elliot/Documents/computer-science/personal-projects/web/frameworks/React/personal-webpage/v0.2/src/components/GitResource.js"],"sourcesContent":["// export function gitResource(url){\n//   const siteRoot = \"https://github.com\";\n//   const re = new RegExp(siteRoot);\n//   if(!url.match(re)) { \n//     console.error(`Attempting to load ${url}, it was incorrectly formatted.`);\n//     return {\"error\": `bad formatting in url ${url}`}; \n//   }\n//   const apiRoot = \"https://api.github.com\";\n//   const call = `${apiRoot}${url.split(siteRoot)[0]}`;\n//   return fetch(call).then(r => {\n//         if(!r.ok) {\n//           console.error(`Attempting to load ${url}, got status ${r.status}.`);\n//           return {\"error\": `status ${r.status}`};\n//         }\n\n//         return r.json()\n//       }\n//     );\n// }\n\nimport React from 'react';\n\nexport class GitResource extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loaded: \"no\", // options: yes, no, error\n      item: null\n    }\n    this.result = \"\";\n  }\n\n  gitResource(url){\n\n    const siteRoot = \"https://github.com\";\n    const re = new RegExp(siteRoot);\n    if(!url.match(re)) { \n      const e = `Attempting to load ${url}, it was incorrectly formatted.`;\n      console.error(e);\n      this.setState({loaded: \"error\", errmsg: e}); \n      return {};\n    }\n    const apiRoot = \"https://raw.githubusercontent.com/\";\n    const call = `${apiRoot}${url.split(siteRoot)[1]}/master/README.md`;\n    console.log(`GET ${call}`);\n    let self = this;\n\n    fetch(call).then(r => {\n          if(!r.ok) {\n            const e = `Attempting to load ${url}, got status ${r.status}.`;\n            console.error(e);\n            this.setState({loaded: \"error\", errmsg: e}); \n          }\n  \n          return r;\n        })\n        .then(\n          (result) => {\n            if(this.state.loaded !== \"error\"){\n              return result.body.getReader();\n            }\n          }, \n          (error) => {\n            this.setState({loaded: \"error\", errmsg: `Attempting to load ${url}, got error ${error}`});\n          }\n          //processText cant be anonymous because it is recursive\n        ).then(reader => { \n            reader.read().then(({done, value}) => {\n              if(done){\n                //this.setState({loaded: \"yes\", item: value});\n\n                const str = new TextDecoder(\"utf-8\").decode(new Uint8Array([84,104,105,115,32,105,115,32,97,32,85,105,110,116,56,65,114,114,97,121,32,99,111,110,118,101,114,116,101,100,32,116,111,32,97,32,115,116,114,105,110,103]));\n                console.log(str);\n                //console.log((Array.of(chars))[0].split(/,/).reduce((x, y) => `${x} ${y}`, \"\"));\n                self.setState({loaded: \"yes\", item: str});\n              }\n              //console.log(`Reading...${value}`);\n              const chunk = value; \n              self.result += chunk;\n              return reader.read().then(processText);\n            })\n          }\n        );\n  }\n\n  componentDidMount(){ \n    this.gitResource(this.props.url);\n  }\n\n  render(){\n    switch(this.state.loaded){\n      case \"no\":\n        return( \n          <div id=\"content\">\n            <p>Fetching from github...</p>\n          </div>\n        )\n      case \"error\":\n        return(\n          <div id=\"content\">\n            <h2>An error occured</h2>\n            <p>{this.state.errmsg}</p>\n          </div>\n        )\n      default:\n        return(\n          <p>{`${this.state.item}`}</p>\n        )\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}