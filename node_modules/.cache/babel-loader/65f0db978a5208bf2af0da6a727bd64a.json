{"ast":null,"code":"import ScotlandYard from \"../pages/Projects/images/scotland.png\";\nimport PlaylistPuller from \"../pages/Projects/images/playlist.png\";\nimport RPNParser from \"../pages/Projects/images/rpn.jpg\";\nimport LeetCode from \"../pages/Projects/images/leetcode.png\";\nimport Euler from \"../pages/Projects/images/euler.png\";\nimport GE from \"../pages/Projects/images/matrix.png\";\nimport Raytracing from \"../pages/Projects/images/tracer.gif\";\nimport Polynomial from \"../pages/Projects/images/poly.png\"; // import the rest of the thumbnails \n\nexport const gitProjects = [{\n  name: \"Scotland Yard OOP Coursework\",\n  thumb: ScotlandYard,\n  url: \"https://github.com/elliot-mb/scotland-yard\",\n  tagline: \"Developing and creating an AI for the Scotland Yard boardgame.\",\n  content: []\n}, {\n  name: \"Playlist Puller\",\n  thumb: PlaylistPuller,\n  url: \"https://github.com/elliot-mb/playlist-puller\",\n  tagline: \"Integrating Spotify, Youtube and Invidious' APIs into a Python script to copy playlists from Spotify over to Youtube.\",\n  content: [\"The goal of this project was, when I was having trouble using the Spotify web client, to save/backup playlists quickly and easily. This was to avoid dependance on Spotify and enables me to retrieve my music should I lose access to my account.\", \"It also allows me to use a YouTube frontend app to listen to my music on the go, without adverts. This is desirable for obvious reasons.\"] //paragraphs of further detail \n\n}, {\n  name: \"Polynomial calculator\",\n  thumb: Polynomial,\n  url: \"https://github.com/elliot-mb/points-to-polynomial\",\n  tagline: \"Generates simplest (order n-1) polynomial which crosses n points with distinct x positions.\",\n  content: [\"I developed this program to test my Haskell skills, and create an algorithm I'd known about for a while and found very interesting.\", \"Contains Gaussian Elimination.\"]\n}, {\n  name: \"RPN Logic Parser\",\n  thumb: RPNParser,\n  url: \"https://github.com/elliot-mb/RPN-logic-parser\",\n  tagline: \"Parses and computes a truth table for logical expressions given in Reverse Polish notation.\",\n  content: [\"Originally posed to us as a challenge during term 1, year 1 of my course at Bristol, I got round to programming it later in the year, in Java.\", \"The program takes a logical expression with or without unknowns. If the expression has unknowns, a compact truth table is generated, else the boolean equivalence of the statement is printed.\", \"I took an object-oriented approach to this problem, creating a slew of operator/value objects governed by interfaces.<br>These were used to completely tokenise the input RPN string. This had advantages, including enabling the array of tokens/objects to be processed directly, calling token interface methods one by one without much external logic.\"]\n}, {\n  name: \"LeetCode solutions\",\n  thumb: LeetCode,\n  url: \"https://github.com/elliot-mb/leetcodes\",\n  tagline: \"My attempts at LeetCode problems.\",\n  content: []\n}, {\n  name: \"Gaussian Elimination Java\",\n  thumb: GE,\n  url: \"https://github.com/elliot-mb/recursive-gaussian\",\n  tagline: \"A recursive algorithm which computes unknowns from a valid Gaussian Elimination matrix.\",\n  content: []\n}, {\n  name: \"Raycaster, Spheretracing\",\n  thumb: Raytracing,\n  url: \"https://github.com/elliot-mb/raycaster-doom\",\n  tagline: \"Using circle-line and circle-circle intersection to calculate rays.\",\n  content: []\n}, {\n  name: \"Project Euler solutions\",\n  thumb: Euler,\n  url: \"https://github.com/elliot-mb/project-euler-solutions\",\n  tagline: \"Programmatic solutions to select Project Euler problems.\",\n  content: [\"These were mainly written a long time ago, so may not be representitive of my current ability or practise.\"]\n}];\nexport const otherProjects = [{\n  name: \"Digital art\",\n  thumb: undefined,\n  url: \"https://google.com\"\n}];","map":{"version":3,"names":["ScotlandYard","PlaylistPuller","RPNParser","LeetCode","Euler","GE","Raytracing","Polynomial","gitProjects","name","thumb","url","tagline","content","otherProjects","undefined"],"sources":["/home/elliot/Documents/computer-science/personal-projects/web/frameworks/React/personal-webpage/v0.4/src/data/projects.js"],"sourcesContent":["import ScotlandYard from \"../pages/Projects/images/scotland.png\";\nimport PlaylistPuller from \"../pages/Projects/images/playlist.png\";\nimport RPNParser from \"../pages/Projects/images/rpn.jpg\";\nimport LeetCode from \"../pages/Projects/images/leetcode.png\";\nimport Euler from \"../pages/Projects/images/euler.png\";\nimport GE from \"../pages/Projects/images/matrix.png\";\nimport Raytracing from \"../pages/Projects/images/tracer.gif\"\nimport Polynomial from \"../pages/Projects/images/poly.png\";\n// import the rest of the thumbnails \n\nexport const gitProjects = [\n  {\n    name:\"Scotland Yard OOP Coursework\",\n    thumb: ScotlandYard,\n    url:\"https://github.com/elliot-mb/scotland-yard\",\n    tagline:\"Developing and creating an AI for the Scotland Yard boardgame.\",\n    content:[]\n  },\n  {\n    name:\"Playlist Puller\",\n    thumb:PlaylistPuller,\n    url:\"https://github.com/elliot-mb/playlist-puller\",\n    tagline:\"Integrating Spotify, Youtube and Invidious' APIs into a Python script to copy playlists from Spotify over to Youtube.\",\n    content:[\"The goal of this project was, when I was having trouble using the Spotify web client, to save/backup playlists quickly and easily. This was to avoid dependance on Spotify and enables me to retrieve my music should I lose access to my account.\",\n    \"It also allows me to use a YouTube frontend app to listen to my music on the go, without adverts. This is desirable for obvious reasons.\"] //paragraphs of further detail \n  },\n  {\n    name:\"Polynomial calculator\",\n    thumb:Polynomial,\n    url:\"https://github.com/elliot-mb/points-to-polynomial\",\n    tagline:\"Generates simplest (order n-1) polynomial which crosses n points with distinct x positions.\",\n    content:[\"I developed this program to test my Haskell skills, and create an algorithm I'd known about for a while and found very interesting.\", \"Contains Gaussian Elimination.\"]\n  },\n  {\n    name:\"RPN Logic Parser\",\n    thumb:RPNParser,\n    url:\"https://github.com/elliot-mb/RPN-logic-parser\",\n    tagline:\"Parses and computes a truth table for logical expressions given in Reverse Polish notation.\",\n    content:[\"Originally posed to us as a challenge during term 1, year 1 of my course at Bristol, I got round to programming it later in the year, in Java.\", \"The program takes a logical expression with or without unknowns. If the expression has unknowns, a compact truth table is generated, else the boolean equivalence of the statement is printed.\", \"I took an object-oriented approach to this problem, creating a slew of operator/value objects governed by interfaces.<br>These were used to completely tokenise the input RPN string. This had advantages, including enabling the array of tokens/objects to be processed directly, calling token interface methods one by one without much external logic.\"]\n  },\n  {\n    name:\"LeetCode solutions\",\n    thumb:LeetCode,\n    url:\"https://github.com/elliot-mb/leetcodes\",\n    tagline:\"My attempts at LeetCode problems.\",\n    content:[]\n  },\n  {\n    name:\"Gaussian Elimination Java\",\n    thumb:GE,\n    url:\"https://github.com/elliot-mb/recursive-gaussian\",\n    tagline:\"A recursive algorithm which computes unknowns from a valid Gaussian Elimination matrix.\",\n    content:[]\n  },\n  {\n    name:\"Raycaster, Spheretracing\",\n    thumb:Raytracing,\n    url:\"https://github.com/elliot-mb/raycaster-doom\",\n    tagline:\"Using circle-line and circle-circle intersection to calculate rays.\",\n    content:[]\n  },\n  {\n    name:\"Project Euler solutions\",\n    thumb:Euler,\n    url:\"https://github.com/elliot-mb/project-euler-solutions\",\n    tagline:\"Programmatic solutions to select Project Euler problems.\",\n    content:[\"These were mainly written a long time ago, so may not be representitive of my current ability or practise.\"]\n  }\n];\n\nexport const otherProjects = [\n  {\n    name:\"Digital art\",\n    thumb: undefined,\n    url:\"https://google.com\",\n\n  }\n];"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,QAAP,MAAqB,uCAArB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,OAAOC,EAAP,MAAe,qCAAf;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,UAAP,MAAuB,mCAAvB,C,CACA;;AAEA,OAAO,MAAMC,WAAW,GAAG,CACzB;EACEC,IAAI,EAAC,8BADP;EAEEC,KAAK,EAAEV,YAFT;EAGEW,GAAG,EAAC,4CAHN;EAIEC,OAAO,EAAC,gEAJV;EAKEC,OAAO,EAAC;AALV,CADyB,EAQzB;EACEJ,IAAI,EAAC,iBADP;EAEEC,KAAK,EAACT,cAFR;EAGEU,GAAG,EAAC,8CAHN;EAIEC,OAAO,EAAC,uHAJV;EAKEC,OAAO,EAAC,CAAC,oPAAD,EACR,0IADQ,CALV,CAM8I;;AAN9I,CARyB,EAgBzB;EACEJ,IAAI,EAAC,uBADP;EAEEC,KAAK,EAACH,UAFR;EAGEI,GAAG,EAAC,mDAHN;EAIEC,OAAO,EAAC,6FAJV;EAKEC,OAAO,EAAC,CAAC,qIAAD,EAAwI,gCAAxI;AALV,CAhByB,EAuBzB;EACEJ,IAAI,EAAC,kBADP;EAEEC,KAAK,EAACR,SAFR;EAGES,GAAG,EAAC,+CAHN;EAIEC,OAAO,EAAC,6FAJV;EAKEC,OAAO,EAAC,CAAC,gJAAD,EAAmJ,gMAAnJ,EAAqV,6VAArV;AALV,CAvByB,EA8BzB;EACEJ,IAAI,EAAC,oBADP;EAEEC,KAAK,EAACP,QAFR;EAGEQ,GAAG,EAAC,wCAHN;EAIEC,OAAO,EAAC,mCAJV;EAKEC,OAAO,EAAC;AALV,CA9ByB,EAqCzB;EACEJ,IAAI,EAAC,2BADP;EAEEC,KAAK,EAACL,EAFR;EAGEM,GAAG,EAAC,iDAHN;EAIEC,OAAO,EAAC,yFAJV;EAKEC,OAAO,EAAC;AALV,CArCyB,EA4CzB;EACEJ,IAAI,EAAC,0BADP;EAEEC,KAAK,EAACJ,UAFR;EAGEK,GAAG,EAAC,6CAHN;EAIEC,OAAO,EAAC,qEAJV;EAKEC,OAAO,EAAC;AALV,CA5CyB,EAmDzB;EACEJ,IAAI,EAAC,yBADP;EAEEC,KAAK,EAACN,KAFR;EAGEO,GAAG,EAAC,sDAHN;EAIEC,OAAO,EAAC,0DAJV;EAKEC,OAAO,EAAC,CAAC,4GAAD;AALV,CAnDyB,CAApB;AA4DP,OAAO,MAAMC,aAAa,GAAG,CAC3B;EACEL,IAAI,EAAC,aADP;EAEEC,KAAK,EAAEK,SAFT;EAGEJ,GAAG,EAAC;AAHN,CAD2B,CAAtB"},"metadata":{},"sourceType":"module"}