{"ast":null,"code":"import ScotlandYard from\"../pages/Projects/images/scotland.png\";import PlaylistPuller from\"../pages/Projects/images/playlist.png\";import RPNParser from\"../pages/Projects/images/rpn.jpg\";import LeetCode from\"../pages/Projects/images/leetcode.png\";import Euler from\"../pages/Projects/images/euler.png\";import GE from\"../pages/Projects/images/matrix.png\";import Raytracing from\"../pages/Projects/images/tracer.gif\";import Polynomial from\"../pages/Projects/images/poly.png\";// import the rest of the thumbnails \nexport var gitProjects=[{name:\"Scotland Yard OOP Coursework\",thumb:ScotlandYard,url:\"https://github.com/elliot-mb/scotland-yard\",tagline:\"Developing and creating an AI for the Scotland Yard boardgame.\",content:[]},{name:\"Playlist Puller\",thumb:PlaylistPuller,url:\"https://github.com/elliot-mb/playlist-puller\",tagline:\"Integrating Spotify, Youtube and Invidious' APIs into a Python script to copy playlists from Spotify over to Youtube.\",content:[\"The goal of this project was, when I was having trouble using the Spotify web client, to save/backup playlists quickly and easily. This was to avoid dependance on Spotify and enables me to retrieve my music should I lose access to my account.\",\"It also allows me to use a YouTube frontend app to listen to my music on the go, without adverts. This is desirable for obvious reasons.\"]//paragraphs of further detail \n},{name:\"Polynomial calculator\",thumb:Polynomial,url:\"https://github.com/elliot-mb/points-to-polynomial\",tagline:\"Generates simplest (order n-1) polynomial which crosses n points with distinct x positions.\",content:[\"I developed this program to test my Haskell skills, and create an algorithm I'd known about for a while and found very interesting.\",\"Contains Gaussian Elimination.\"]},{name:\"RPN Logic Parser\",thumb:RPNParser,url:\"https://github.com/elliot-mb/RPN-logic-parser\",tagline:\"Parses and computes a truth table for logical expressions given in Reverse Polish notation.\",content:[\"Originally posed to us as a challenge during term 1, year 1 of my course at Bristol, I got round to programming it later in the year, in Java.\",\"The program takes a logical expression with or without unknowns. If the expression has unknowns, a compact truth table is generated, else the boolean equivalence of the statement is printed.\",\"I took an object-oriented approach to this problem, creating a slew of operator/value objects governed by interfaces.<br>These were used to completely tokenise the input RPN string. This had advantages, including enabling the array of tokens/objects to be processed directly, calling token interface methods one by one without much external logic.\"]},{name:\"LeetCode solutions\",thumb:LeetCode,url:\"https://github.com/elliot-mb/leetcodes\",tagline:\"My attempts at LeetCode problems.\",content:[]},{name:\"Gaussian Elimination Java\",thumb:GE,url:\"https://github.com/elliot-mb/recursive-gaussian\",tagline:\"A recursive algorithm which computes unknowns from a valid Gaussian Elimination matrix.\",content:[]},{name:\"Raycaster, Spheretracing\",thumb:Raytracing,url:\"https://github.com/elliot-mb/raycaster-doom\",tagline:\"Using circle-line and circle-circle intersection to calculate rays.\",content:[]},{name:\"Project Euler solutions\",thumb:Euler,url:\"https://github.com/elliot-mb/project-euler-solutions\",tagline:\"Programmatic solutions to select Project Euler problems.\",content:[\"These were mainly written a long time ago, so may not be representitive of my current ability or practise.\"]}];export var otherProjects=[{name:\"Digital art\",thumb:undefined,url:\"https://google.com\"}];","map":{"version":3,"names":["ScotlandYard","PlaylistPuller","RPNParser","LeetCode","Euler","GE","Raytracing","Polynomial","gitProjects","name","thumb","url","tagline","content","otherProjects","undefined"],"sources":["/home/elliot/Documents/computer-science/personal-projects/web/frameworks/React/personal-webpage/v0.4/src/data/projects.js"],"sourcesContent":["import ScotlandYard from \"../pages/Projects/images/scotland.png\";\nimport PlaylistPuller from \"../pages/Projects/images/playlist.png\";\nimport RPNParser from \"../pages/Projects/images/rpn.jpg\";\nimport LeetCode from \"../pages/Projects/images/leetcode.png\";\nimport Euler from \"../pages/Projects/images/euler.png\";\nimport GE from \"../pages/Projects/images/matrix.png\";\nimport Raytracing from \"../pages/Projects/images/tracer.gif\"\nimport Polynomial from \"../pages/Projects/images/poly.png\";\n// import the rest of the thumbnails \n\nexport const gitProjects = [\n  {\n    name:\"Scotland Yard OOP Coursework\",\n    thumb: ScotlandYard,\n    url:\"https://github.com/elliot-mb/scotland-yard\",\n    tagline:\"Developing and creating an AI for the Scotland Yard boardgame.\",\n    content:[]\n  },\n  {\n    name:\"Playlist Puller\",\n    thumb:PlaylistPuller,\n    url:\"https://github.com/elliot-mb/playlist-puller\",\n    tagline:\"Integrating Spotify, Youtube and Invidious' APIs into a Python script to copy playlists from Spotify over to Youtube.\",\n    content:[\"The goal of this project was, when I was having trouble using the Spotify web client, to save/backup playlists quickly and easily. This was to avoid dependance on Spotify and enables me to retrieve my music should I lose access to my account.\",\n    \"It also allows me to use a YouTube frontend app to listen to my music on the go, without adverts. This is desirable for obvious reasons.\"] //paragraphs of further detail \n  },\n  {\n    name:\"Polynomial calculator\",\n    thumb:Polynomial,\n    url:\"https://github.com/elliot-mb/points-to-polynomial\",\n    tagline:\"Generates simplest (order n-1) polynomial which crosses n points with distinct x positions.\",\n    content:[\"I developed this program to test my Haskell skills, and create an algorithm I'd known about for a while and found very interesting.\", \"Contains Gaussian Elimination.\"]\n  },\n  {\n    name:\"RPN Logic Parser\",\n    thumb:RPNParser,\n    url:\"https://github.com/elliot-mb/RPN-logic-parser\",\n    tagline:\"Parses and computes a truth table for logical expressions given in Reverse Polish notation.\",\n    content:[\"Originally posed to us as a challenge during term 1, year 1 of my course at Bristol, I got round to programming it later in the year, in Java.\", \"The program takes a logical expression with or without unknowns. If the expression has unknowns, a compact truth table is generated, else the boolean equivalence of the statement is printed.\", \"I took an object-oriented approach to this problem, creating a slew of operator/value objects governed by interfaces.<br>These were used to completely tokenise the input RPN string. This had advantages, including enabling the array of tokens/objects to be processed directly, calling token interface methods one by one without much external logic.\"]\n  },\n  {\n    name:\"LeetCode solutions\",\n    thumb:LeetCode,\n    url:\"https://github.com/elliot-mb/leetcodes\",\n    tagline:\"My attempts at LeetCode problems.\",\n    content:[]\n  },\n  {\n    name:\"Gaussian Elimination Java\",\n    thumb:GE,\n    url:\"https://github.com/elliot-mb/recursive-gaussian\",\n    tagline:\"A recursive algorithm which computes unknowns from a valid Gaussian Elimination matrix.\",\n    content:[]\n  },\n  {\n    name:\"Raycaster, Spheretracing\",\n    thumb:Raytracing,\n    url:\"https://github.com/elliot-mb/raycaster-doom\",\n    tagline:\"Using circle-line and circle-circle intersection to calculate rays.\",\n    content:[]\n  },\n  {\n    name:\"Project Euler solutions\",\n    thumb:Euler,\n    url:\"https://github.com/elliot-mb/project-euler-solutions\",\n    tagline:\"Programmatic solutions to select Project Euler problems.\",\n    content:[\"These were mainly written a long time ago, so may not be representitive of my current ability or practise.\"]\n  }\n];\n\nexport const otherProjects = [\n  {\n    name:\"Digital art\",\n    thumb: undefined,\n    url:\"https://google.com\",\n\n  }\n];"],"mappings":"AAAA,MAAOA,aAAP,KAAyB,uCAAzB,CACA,MAAOC,eAAP,KAA2B,uCAA3B,CACA,MAAOC,UAAP,KAAsB,kCAAtB,CACA,MAAOC,SAAP,KAAqB,uCAArB,CACA,MAAOC,MAAP,KAAkB,oCAAlB,CACA,MAAOC,GAAP,KAAe,qCAAf,CACA,MAAOC,WAAP,KAAuB,qCAAvB,CACA,MAAOC,WAAP,KAAuB,mCAAvB,CACA;AAEA,MAAO,IAAMC,YAAW,CAAG,CACzB,CACEC,IAAI,CAAC,8BADP,CAEEC,KAAK,CAAEV,YAFT,CAGEW,GAAG,CAAC,4CAHN,CAIEC,OAAO,CAAC,gEAJV,CAKEC,OAAO,CAAC,EALV,CADyB,CAQzB,CACEJ,IAAI,CAAC,iBADP,CAEEC,KAAK,CAACT,cAFR,CAGEU,GAAG,CAAC,8CAHN,CAIEC,OAAO,CAAC,uHAJV,CAKEC,OAAO,CAAC,CAAC,oPAAD,CACR,0IADQ,CACoI;AAN9I,CARyB,CAgBzB,CACEJ,IAAI,CAAC,uBADP,CAEEC,KAAK,CAACH,UAFR,CAGEI,GAAG,CAAC,mDAHN,CAIEC,OAAO,CAAC,6FAJV,CAKEC,OAAO,CAAC,CAAC,qIAAD,CAAwI,gCAAxI,CALV,CAhByB,CAuBzB,CACEJ,IAAI,CAAC,kBADP,CAEEC,KAAK,CAACR,SAFR,CAGES,GAAG,CAAC,+CAHN,CAIEC,OAAO,CAAC,6FAJV,CAKEC,OAAO,CAAC,CAAC,gJAAD,CAAmJ,gMAAnJ,CAAqV,6VAArV,CALV,CAvByB,CA8BzB,CACEJ,IAAI,CAAC,oBADP,CAEEC,KAAK,CAACP,QAFR,CAGEQ,GAAG,CAAC,wCAHN,CAIEC,OAAO,CAAC,mCAJV,CAKEC,OAAO,CAAC,EALV,CA9ByB,CAqCzB,CACEJ,IAAI,CAAC,2BADP,CAEEC,KAAK,CAACL,EAFR,CAGEM,GAAG,CAAC,iDAHN,CAIEC,OAAO,CAAC,yFAJV,CAKEC,OAAO,CAAC,EALV,CArCyB,CA4CzB,CACEJ,IAAI,CAAC,0BADP,CAEEC,KAAK,CAACJ,UAFR,CAGEK,GAAG,CAAC,6CAHN,CAIEC,OAAO,CAAC,qEAJV,CAKEC,OAAO,CAAC,EALV,CA5CyB,CAmDzB,CACEJ,IAAI,CAAC,yBADP,CAEEC,KAAK,CAACN,KAFR,CAGEO,GAAG,CAAC,sDAHN,CAIEC,OAAO,CAAC,0DAJV,CAKEC,OAAO,CAAC,CAAC,4GAAD,CALV,CAnDyB,CAApB,CA4DP,MAAO,IAAMC,cAAa,CAAG,CAC3B,CACEL,IAAI,CAAC,aADP,CAEEC,KAAK,CAAEK,SAFT,CAGEJ,GAAG,CAAC,oBAHN,CAD2B,CAAtB"},"metadata":{},"sourceType":"module"}