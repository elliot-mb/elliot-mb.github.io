{"ast":null,"code":"var _jsxFileName = \"/home/elliot/Documents/computer-science/personal-projects/web/frameworks/React/personal-webpage/v0.2/src/components/GitResource.js\";\n// export function gitResource(url){\n//   const siteRoot = \"https://github.com\";\n//   const re = new RegExp(siteRoot);\n//   if(!url.match(re)) { \n//     console.error(`Attempting to load ${url}, it was incorrectly formatted.`);\n//     return {\"error\": `bad formatting in url ${url}`}; \n//   }\n//   const apiRoot = \"https://api.github.com\";\n//   const call = `${apiRoot}${url.split(siteRoot)[0]}`;\n//   return fetch(call).then(r => {\n//         if(!r.ok) {\n//           console.error(`Attempting to load ${url}, got status ${r.status}.`);\n//           return {\"error\": `status ${r.status}`};\n//         }\n//         return r.json()\n//       }\n//     );\n// }\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class GitResource extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: \"no\",\n      // options: yes, no, error\n      item: null\n    };\n  }\n\n  gitResource(url) {\n    function processText(_ref) {\n      let {\n        done,\n        value\n      } = _ref;\n\n      if (done) {\n        //this.setState({loaded: \"yes\", item: value});\n        const str = new TextDecoder(\"utf-8\").decode(new Uint8Array([84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 85, 105, 110, 116, 56, 65, 114, 114, 97, 121, 32, 99, 111, 110, 118, 101, 114, 116, 101, 100, 32, 116, 111, 32, 97, 32, 115, 116, 114, 105, 110, 103]));\n        console.log(str); //console.log((Array.of(chars))[0].split(/,/).reduce((x, y) => `${x} ${y}`, \"\"));\n\n        this.setState({\n          loaded: \"yes\",\n          item: str\n        });\n      } //console.log(`Reading...${value}`);\n\n\n      const chunk = value;\n      chars += chunk;\n      return reader.read().then(processText);\n    }\n\n    const siteRoot = \"https://github.com\";\n    const re = new RegExp(siteRoot);\n\n    if (!url.match(re)) {\n      const e = `Attempting to load ${url}, it was incorrectly formatted.`;\n      console.error(e);\n      this.setState({\n        loaded: \"error\",\n        errmsg: e\n      });\n      return {};\n    }\n\n    const apiRoot = \"https://raw.githubusercontent.com/\";\n    const call = `${apiRoot}${url.split(siteRoot)[1]}/master/README.md`;\n    console.log(`GET ${call}`);\n    fetch(call).then(r => {\n      if (!r.ok) {\n        const e = `Attempting to load ${url}, got status ${r.status}.`;\n        console.error(e);\n        this.setState({\n          loaded: \"error\",\n          errmsg: e\n        });\n      }\n\n      return r;\n    }).then(result => {\n      if (this.state.loaded !== \"error\") {\n        return result.body.getReader();\n      }\n    }, error => {\n      this.setState({\n        loaded: \"error\",\n        errmsg: `Attempting to load ${url}, got error ${error}`\n      });\n    } //processText cant be anonymous because it is recursive\n    ).then(reader => {\n      let chars = new Uint8Array();\n      reader.read().then(processText);\n    });\n  }\n\n  componentDidMount() {\n    this.gitResource(this.props.url);\n  }\n\n  render() {\n    switch (this.state.loaded) {\n      case \"no\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"content\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Fetching from github...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this);\n\n      case \"error\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"An error occured\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.errmsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `${this.state.item}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this);\n    }\n  }\n\n}","map":{"version":3,"names":["React","GitResource","Component","constructor","props","state","loaded","item","gitResource","url","processText","done","value","str","TextDecoder","decode","Uint8Array","console","log","setState","chunk","chars","reader","read","then","siteRoot","re","RegExp","match","e","error","errmsg","apiRoot","call","split","fetch","r","ok","status","result","body","getReader","componentDidMount","render"],"sources":["/home/elliot/Documents/computer-science/personal-projects/web/frameworks/React/personal-webpage/v0.2/src/components/GitResource.js"],"sourcesContent":["// export function gitResource(url){\n//   const siteRoot = \"https://github.com\";\n//   const re = new RegExp(siteRoot);\n//   if(!url.match(re)) { \n//     console.error(`Attempting to load ${url}, it was incorrectly formatted.`);\n//     return {\"error\": `bad formatting in url ${url}`}; \n//   }\n//   const apiRoot = \"https://api.github.com\";\n//   const call = `${apiRoot}${url.split(siteRoot)[0]}`;\n//   return fetch(call).then(r => {\n//         if(!r.ok) {\n//           console.error(`Attempting to load ${url}, got status ${r.status}.`);\n//           return {\"error\": `status ${r.status}`};\n//         }\n\n//         return r.json()\n//       }\n//     );\n// }\n\nimport React from 'react';\n\nexport class GitResource extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loaded: \"no\", // options: yes, no, error\n      item: null\n    }\n    \n  }\n\n  gitResource(url){\n\n    function processText({done, value}) {\n      if(done){\n        //this.setState({loaded: \"yes\", item: value});\n\n        const str = new TextDecoder(\"utf-8\").decode(new Uint8Array([84,104,105,115,32,105,115,32,97,32,85,105,110,116,56,65,114,114,97,121,32,99,111,110,118,101,114,116,101,100,32,116,111,32,97,32,115,116,114,105,110,103]));\n        console.log(str);\n        //console.log((Array.of(chars))[0].split(/,/).reduce((x, y) => `${x} ${y}`, \"\"));\n        this.setState({loaded: \"yes\", item: str});\n      }\n      //console.log(`Reading...${value}`);\n      const chunk = value; \n      chars += chunk;\n      return reader.read().then(processText);\n    }\n\n    const siteRoot = \"https://github.com\";\n    const re = new RegExp(siteRoot);\n    if(!url.match(re)) { \n      const e = `Attempting to load ${url}, it was incorrectly formatted.`;\n      console.error(e);\n      this.setState({loaded: \"error\", errmsg: e}); \n      return {};\n    }\n    const apiRoot = \"https://raw.githubusercontent.com/\";\n    const call = `${apiRoot}${url.split(siteRoot)[1]}/master/README.md`;\n    console.log(`GET ${call}`);\n    fetch(call).then(r => {\n          if(!r.ok) {\n            const e = `Attempting to load ${url}, got status ${r.status}.`;\n            console.error(e);\n            this.setState({loaded: \"error\", errmsg: e}); \n          }\n  \n          return r;\n        })\n        .then(\n          (result) => {\n            if(this.state.loaded !== \"error\"){\n              return result.body.getReader();\n            }\n          }, \n          (error) => {\n            this.setState({loaded: \"error\", errmsg: `Attempting to load ${url}, got error ${error}`});\n          }\n          //processText cant be anonymous because it is recursive\n        ).then(reader => { \n            let chars = new Uint8Array();\n            reader.read().then(processText)\n          }\n        );\n  }\n\n  componentDidMount(){ \n    this.gitResource(this.props.url);\n  }\n\n  render(){\n    switch(this.state.loaded){\n      case \"no\":\n        return( \n          <div id=\"content\">\n            <p>Fetching from github...</p>\n          </div>\n        )\n      case \"error\":\n        return(\n          <div id=\"content\">\n            <h2>An error occured</h2>\n            <p>{this.state.errmsg}</p>\n          </div>\n        )\n      default:\n        return(\n          <p>{`${this.state.item}`}</p>\n        )\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}